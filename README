Objective:
Develop your understanding of recursion by writing a Python program that traverses a nested list structure, sums up all the numeric elements, and provides additional information about the recursion process.
Instructions:
Your task is to create a Python function that will:

Traverse a list of lists of random depth and random numbers of elements.
Sum all the numbers in the nested structure.
Track and output the following additional information:
Number of recursions: How many times the function recursed to reach all nested elements.
Total number of items: Count all items in the list, including numbers and any lists.
Deepest level of nesting: The maximum depth of any sublist in the nested list.
Steps to Follow:

Input:
A list of lists containing random depths and random numbers of elements. Some elements will be numbers, while others will be lists of more numbers.
Output:

A tuple or list containing the following, in this order:
The sum of all numbers found in the nested list.
The number of recursions (i.e., the number of times the recursive function calls itself).
The total number of items in the list, including nested lists.
The deepest level of nesting encountered.
Example:
nested_list = [1, [2, 3], [[4], [5, [6, 7]]], 8] # Expected output: # (36, [total recursions], 10, 3)

Requirements:
Recursive Function: The core function must use recursion to navigate through the list of lists.
Accurate Tracking: Keep track of the number of recursive calls, total items, and deepest level of nesting.
The function should return the result as a tuple or a list with the four required values in the correct order.
Handle Edge Cases: The program should handle empty lists and non-integer values appropriately (e.g., skip non-numeric items).

Deliverables:
Submit a link to your GitHub repository with the Python script (recursive_traversal.py).

Extra Credit:
Add functionality to handle non-numeric items gracefully, such as skipping over them or raising an error message.
